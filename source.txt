AudioSegment.ffmpeg = str(open("env.txt", "r").read())

customtkinter.set_appearance_mode("System")  # Modes: "System" (standard), "Dark", "Light"
customtkinter.set_default_color_theme("blue")  # Themes: "blue" (standard), "green", "dark-blue"

app = customtkinter.CTk()
app.title("MUSIC PLAYER | BY TENICA")
app.geometry("1100x580")
app.grid_columnconfigure(1, weight=1)
app.grid_columnconfigure((2, 3), weight=0)
app.grid_rowconfigure((0, 1, 2), weight=1)

key_remain = "PRESS CHECK KEY | NOT DEFINED"
state = "disabled"
list_function = []
update_lan = []

#CUSTOM GUI and SETTINGS

sidebar_frame = customtkinter.CTkFrame(app, width=140, corner_radius=0)
sidebar_frame.grid(row=0, column=0,rowspan = 5, sticky="nsew")
sidebar_frame.grid_rowconfigure(4, weight=1)

time_data = customtkinter.CTkFrame(sidebar_frame)
time_data.grid(row=3, column=0, padx=20, pady=(10,0))
time_text = customtkinter.CTkLabel(time_data, text="Time Database (Minutes)")
time_text.grid(row = 0, column = 0)
time_data1 = customtkinter.CTkEntry(time_data)
time_data1.grid(row=1, column=0)
time_data2 = customtkinter.CTkEntry(time_data)
time_data2.grid(row=2, column=0)

time_frame = customtkinter.CTkFrame(sidebar_frame)
time_frame.grid(row=4, column=0, padx=20, pady=(0,0))
time_text = customtkinter.CTkLabel(time_frame, text="Time (Seconds)")
time_text.grid(row = 0, column = 0)
time1 = customtkinter.CTkEntry(time_frame)
time1.grid(row=1, column=0)
time2 = customtkinter.CTkEntry(time_frame)
time2.grid(row=2, column=0)


speed_frame = customtkinter.CTkFrame(sidebar_frame)
speed_frame.grid(row=5, column=0, padx=20, pady=(0,0))
speed_text = customtkinter.CTkLabel(speed_frame, text="Speed")
speed_text.grid(row = 0, column = 0)
speed1 = customtkinter.CTkEntry(speed_frame)
speed1.grid(row=1, column=0)
speed2 = customtkinter.CTkEntry(speed_frame)
speed2.grid(row=2, column=0)

def update_gui_lan(text: str):
     for i in update_lan:
        try:
            txt = i.get()
        except: txt = i.cget("text")
        i.configure(text = change_language(txt))

list_lan = [s.capitalize() for s in list(LANGUAGES.values())]
Language_menu = customtkinter.CTkOptionMenu(sidebar_frame, values=["English","Chinese (simplified)","Vietnamese"], command=update_gui_lan)
Language_menu.grid(row=6, column=0, padx=20, pady=(20, 10))
Language_menu.set("English")

def change_language(text):
    lan = Language_menu.get()
    reversed_languages = {v: k for k, v in LANGUAGES.items()}
    # Tìm mã ngôn ngữ tương ứng với tên ngôn ngữ đã cho
    language_code = reversed_languages.get(str(lan).lower())
    rs = Translator().translate(text=text, dest=language_code).text.upper()
    return rs



def change_appearance_mode_event(new_appearance_mode: str):
        customtkinter.set_appearance_mode(new_appearance_mode)

def change_scaling_event(new_scaling: str):
        new_scaling_float = int(new_scaling.replace("%", "")) / 100
        customtkinter.set_widget_scaling(new_scaling_float)


logo_label = customtkinter.CTkLabel(sidebar_frame, text="MUSIC PLAYER", font=customtkinter.CTkFont(size=20, weight="bold"))
logo_label.grid(row=1, column=0, padx=20, pady=(10, 0))
logo_label = customtkinter.CTkLabel(sidebar_frame, text="", font=customtkinter.CTkFont(size=20, weight="bold"))
appearance_mode_label = customtkinter.CTkLabel(sidebar_frame, text=change_language("Appearance Mode"), anchor="w")
appearance_mode_label.grid(row=7, column=0, padx=20, pady=(10, 0))
update_lan.append(appearance_mode_label)
appearance_mode_optionemenu = customtkinter.CTkOptionMenu(sidebar_frame, values=["Light", "Dark", "System"],
                                                                       command=change_appearance_mode_event)
list_function.append(appearance_mode_optionemenu)

appearance_mode_optionemenu.configure(state = state)
appearance_mode_optionemenu.grid(row=8, column=0, padx=20, pady=(10, 10))
scaling_label = customtkinter.CTkLabel(sidebar_frame, text=change_language("UI Scaling"), anchor="w")
scaling_label.grid(row=9, column=0, padx=20, pady=(10, 0))
update_lan.append(scaling_label)
scaling_optionemenu = customtkinter.CTkOptionMenu(sidebar_frame, values=["80%", "90%", "100%", "110%", "120%"],
                                                               command=change_scaling_event)

list_function.append(scaling_optionemenu)

scaling_optionemenu.configure(state = state)
scaling_optionemenu.grid(row=10, column=0, padx=20, pady=(10, 20))
scaling_optionemenu.set("100%")
appearance_mode_optionemenu.set("System")

#GEN and CHECK KEY

def show_checkmark():
    CTkMessagebox(message=change_language("LICENSE KEY IS COPIED, SEND TO ADMIN FOR ACTIVATION"),
                  icon="check", option_1=change_language("OK"),option_2=change_language("CANCEL"),title="ADMIN TENICA")
def KeyGen():
            info=""
            info+=str(uuid.getnode())
            info+="ngohanquangvu"
            message_bytes = info.encode('ascii')
            base64_bytes = base64.b64encode(message_bytes)
            base64_message = base64_bytes.decode('ascii')
            return base64_message

key = KeyGen()

def copy_key():
    app.clipboard_clear()
    app.clipboard_append(KeyGen())
    show_checkmark()

gen_key = customtkinter.CTkButton(app, text=f"{key}", border_width=2, text_color=("gray10", "#DCE4EE"),fg_color="transparent",corner_radius=10,command=copy_key)
gen_key.grid(row=3, column=1, columnspan=2, padx=(20, 0), pady=(20, 20), sticky="nsew")

def KeyCheck():
        global key_remain
        try:
            a=requests.get("https://raw.githubusercontent.com/ngohanquangvu/MusicPLayer/main/key.html").text.split("\n")
            for i in a:
                if KeyGen()==i.split("|")[0]:
                    k=i.split("|")[1].split("/")
                    x=datetime.datetime.now()
                    check_time=x.day+x.month*30+x.year*365
                    key_time=int(k[0])+int(k[1])*30+int(k[2])*365
                    if check_time<=key_time:
                        return f"KEY IS ACTIVED - REMAINS: {key_time-check_time+1} DAYS|{i.split('|')[2]}"
                    else:
                        return "KEY IS EXPIRED, CLICK KEY TO COPY|UNREGISTERD"
            return "KEY IS NOT REGISTERED, CLICK KEY TO COPY|UNREGISTERD"
        except:
             return "YOUR INTERNET IS DISCONNECT!!! | NOT DEFINED"

def update_status():
      key_remain = KeyCheck()
      status.configure(text = change_language(f"STATUS: {key_remain.split('|')[0]} | USER: {key_remain.split('|')[1]}"))
      if ("ACTIVED" in key_remain):
           state = "normal"
           for i in list_function:
                 i.configure(state = state)


button_checkkey = customtkinter.CTkButton(master=app, fg_color="transparent", border_width=2, text_color=("gray10", "#DCE4EE"),text="CHECK LICENSE KEY",command=update_status)
button_checkkey.grid(row=3, column=3, padx=(20, 20), pady=(20, 20), sticky="nsew")
update_lan.append(button_checkkey)


status = customtkinter.CTkLabel(app, text=f"STATUS: {key_remain.split('|')[0]} | USER: {key_remain.split('|')[1]}",text_color=("gray10", "#DCE4EE"),fg_color="transparent",corner_radius=10)
status.grid(row=4, column=1, columnspan=2, padx=(20, 0), pady=(0, 10), sticky="nsew")
update_lan.append(status)




#Mode Choices
mode = customtkinter.IntVar()

scrollable_frame = customtkinter.CTkFrame(app)
scrollable_frame.grid(row=0, column=3, padx=(20, 20), pady=(20, 0), sticky="nsew")
scrollable_frame.grid_columnconfigure(0, weight=1)

for i in range(3):
            switch = customtkinter.CTkRadioButton(master=scrollable_frame, text=f"Mode {i+1}", variable = mode, value=i+1)
            switch.grid(row=i, column=0, padx=10, pady=(30, 20))
            switch.configure(state = state)
            list_function.append(switch)
            update_lan.append(switch)


#Data


data_label = customtkinter.CTkLabel(scrollable_frame, text="Data: ")
data_label.grid(row=4, column=0, padx=10, pady=(30, 20), sticky="nsew")
update_lan.append(data_label)

folder_label = customtkinter.CTkLabel(scrollable_frame, text="Folder: ")
folder_label.grid(row=5, column=0, padx=10, pady=(30, 20), sticky="nsew")
update_lan.append(folder_label)

speed_label = customtkinter.CTkLabel(scrollable_frame, text="Speed: ")
speed_label.grid(row=6, column=0, padx=10, pady=(30, 20), sticky="nsew")
update_lan.append(speed_label)

#main button


main_frame = customtkinter.CTkFrame(app, corner_radius=10, height= 1000, width=830)
main_frame.grid(row=0, column=1, padx=(20, 10), pady=(20, 0), sticky="nsew")
main_frame.grid_rowconfigure(4, weight=1)

log_frame = customtkinter.CTkFrame(app, corner_radius=10, height= 300, width=170)
log_frame.grid(row=0, column=2, padx=(0, 5), pady=(20, 0), sticky="nsew")

data = [[] for _ in range(7)]

# function to open a new window
def open_new_window():
    global all_pages, new_window, data
    # create new window
    new_window = customtkinter.CTkToplevel(app)
    new_window.after(20, new_window.lift)
    new_window.title("Select Data")
    update_lan.append(new_window)
    sidebar_frame = customtkinter.CTkFrame(new_window)
    sidebar_frame.grid(row=0, column=5)

    # create multiple pages (frames)
    pages = [customtkinter.CTkFrame(master=new_window) for _ in range(7)]

    # save all pages in list
    all_pages = pages

    # add them to the window with grid manager
    for page in all_pages:
        page.grid(row=0, column=0)

    # create buttons to select a page
    for i, page in enumerate(pages):
        button = customtkinter.CTkButton(master=sidebar_frame, text=f"Database {i+1}", command=lambda page=page: select_page(page))
        button.grid(row=i, column=2, pady=5)
        update_lan.append(button)

        # create two buttons and a textbox for each page
        select_folder_button = customtkinter.CTkButton(master=page, text="Choose folder", command=lambda i=i: select_folder(i))
        select_folder_button.pack()
        update_lan.append(select_folder_button)
        clear_button = customtkinter.CTkButton(master=page, text='Clear Folder', command=lambda i=i: clear_folder(i))
        clear_button.pack()
        update_lan.append(clear_button)
        text_area = customtkinter.CTkTextbox(master=page, width=300)
        text_area.pack()
        if data[i]:
            text_area.insert('end', '\n'.join(data[i]))
        text_area.configure(state = 'disabled')

    # function to select a page
    def select_page(selected_page):
        # make selected page visible
        selected_page.grid(row=0, column=0, columnspan=3, sticky="nsew")

        # remove all other pages
        for page in all_pages:
            if page is not selected_page:
                page.grid_forget()

    # select initial page
    select_page(pages[0])

def clear_folder(i):
    text_area = all_pages[i].winfo_children()[2]
    text_area.configure(state = 'normal')
    text_area.delete("1.0", "end")
    data[i].clear()
    text_area.configure(state = 'disabled')

def select_folder(i):
    text_area = all_pages[i].winfo_children()[2]
    text_area.configure(state = 'disabled')
    folder_path = filedialog.askdirectory()
    show_files(i, folder_path)
    new_window.after(20, new_window.lift)

def get_all_folder_paths(directory):
    folder_paths = [os.path.join(directory, f) for f in os.listdir(directory) if os.path.isdir(os.path.join(directory, f))]
    return folder_paths

def show_files(i, folder_path):
    text_area = all_pages[i].winfo_children()[2]
    if folder_path:
        text_area.configure(state = 'normal')
        files = "\n".join(get_all_folder_paths(folder_path))
        text_area.insert('end', files+"\n")
        data[i]=(files.split("\n"))
        text_area.configure(state = 'disabled')

# open new window
open_data_button = customtkinter.CTkButton(log_frame, text=change_language("Open Data list"), command=open_new_window, height = 170, width = 170)
open_data_button.grid(row=3, column=2, padx=10, pady=(30, 30))
open_data_button.configure(state = state)
update_lan.append(open_data_button)
list_function.append(open_data_button)

#Scale


scale_frame = customtkinter.CTkFrame(main_frame, width=450, height=200)
scale_frame.grid(row = 0, column = 0, pady = (20, 0), padx = 20, sticky = "nsew")


def shorten_number(num):
    if num >= 1000000:
        return str(round(num/1000000, 1)).rstrip('0').rstrip('.') + 'M'
    elif num >= 1000:
        return str(round(num/1000, 1)).rstrip('0').rstrip('.') + 'K'
    else:
        return int(num)
def on_scale_change(label):
    def f(value):
        label.configure(text = shorten_number(value))
    return f

label1 = ctk.CTkLabel(scale_frame, text="20")
label1.grid(row = 0, column = 0, padx = (15, 15))
scale1 = ctk.CTkSlider(scale_frame, from_=20, to=40, command=on_scale_change(label1), orientation="vertical", number_of_steps = 20)
scale1.grid(row = 1, column = 0, padx = (15, 15), pady = 10)
scale1.set(20.0)

label2 = ctk.CTkLabel(scale_frame, text="40")
label2.grid(row = 0, column = 1, padx = (10,10))
scale2 = ctk.CTkSlider(scale_frame, from_=40, to=80, command=on_scale_change(label2), orientation="vertical", number_of_steps = 40)
scale2.grid(row = 1, column = 1, padx = (10,10))
scale2.set(40.0)

label3 = ctk.CTkLabel(scale_frame, text="80")
label3.grid(row = 0, column = 2, padx = (15,10))
scale3 = ctk.CTkSlider(scale_frame, from_=80, to=160, command=on_scale_change(label3), orientation="vertical", number_of_steps = 80)
scale3.grid(row = 1, column = 2, padx = (15,10))
scale3.set(80)

label4 = ctk.CTkLabel(scale_frame, text="160")
label4.grid(row = 0, column = 3, padx = (15,10))
scale4 = ctk.CTkSlider(scale_frame, from_=160, to=320, command=on_scale_change(label4), orientation="vertical", number_of_steps = 60)
scale4.grid(row = 1, column = 3, padx = (15,10))
scale4.set(160)

label5 = ctk.CTkLabel(scale_frame, text="320")
label5.grid(row = 0, column = 4, padx = (15,10))
scale5 = ctk.CTkSlider(scale_frame, from_=320, to=625, command=on_scale_change(label5), orientation="vertical", number_of_steps = 305)
scale5.grid(row = 1, column = 4, padx = (15,10))
scale5.set(320)

label6 = ctk.CTkLabel(scale_frame, text="625")
label6.grid(row = 0, column = 5, padx = (15,10))
scale6 = ctk.CTkSlider(scale_frame, from_=625, to=1250, command=on_scale_change(label6), orientation="vertical", number_of_steps = 625)
scale6.grid(row = 1, column = 5, padx = (15,10))
scale6.set(625)

label7 = ctk.CTkLabel(scale_frame, text="1250")
label7.grid(row = 0, column = 6, padx = (15,10))
scale7 = ctk.CTkSlider(scale_frame, from_=1250, to=2500, command=on_scale_change(label7), orientation="vertical", number_of_steps = 1250)
scale7.grid(row = 1, column = 6, padx = (15,10))
scale7.set(1250)

label8 = ctk.CTkLabel(scale_frame, text="2.5K")
label8.grid(row = 0, column = 7, padx = (15,10))
scale8 = ctk.CTkSlider(scale_frame, from_=2500, to=5000, command=on_scale_change(label8), orientation="vertical", number_of_steps = 2500)
scale8.grid(row = 1, column = 7, padx = (15,10))
scale8.set(2500)

label9 = ctk.CTkLabel(scale_frame, text="5K")
label9.grid(row = 0, column = 8, padx = (15,10))
scale9 = ctk.CTkSlider(scale_frame, from_=5000, to=10000, command=on_scale_change(label9), orientation="vertical", number_of_steps = 5000)
scale9.grid(row = 1, column = 8, padx = (15,10))
scale9.set(5000)

label10 = ctk.CTkLabel(scale_frame, text="10K")
label10.grid(row = 0, column = 9, padx = (10,10))
scale10 = ctk.CTkSlider(scale_frame, from_=10000, to=20000, command=on_scale_change(label10), orientation="vertical", number_of_steps = 10000)
scale10.grid(row = 1, column = 9, padx = (10,10))
scale10.set(10000)

progress = customtkinter.CTkProgressBar(main_frame, orientation='horizontal', mode='determinate', width=480, height=20)
progress.grid(row=5, column=0, padx=(10, 10), pady=(10,10))
progress.set(0)


#start
def start():
    if str(mode.get()) == "1":
         mode1()
    elif str(mode.get()) == "2":
         mode2()
    else:
         mode3()


def mode1():

    def play_file_mp3(file, time_change):

        list_factor = []

        song = AudioSegment.from_file(file)

        segments = [song[i:i+time_change*1000] for i in range(0, len(song), time_change*1000)]
        edited_segments = []
        d=0
        for segment in segments:
            d+=1
            progress.set(d/len(segments))
            app.update_idletasks()

            speed_factor = round(random.uniform(float(speed1.get()), float(speed2.get())), 3)
            fast_song = segment.speedup(playback_speed=speed_factor)

            hz1 = random.randint(20, 40)
            segment.set_frame_rate(hz1)
            hz2 = random.randint(40, 80)
            segment.set_frame_rate(hz2)
            hz3 = random.randint(80, 160)
            segment.set_frame_rate(hz3)
            hz4 = random.randint(160, 320)
            segment.set_frame_rate(hz4)
            hz5 = random.randint(320, 625)
            segment.set_frame_rate(hz5)
            hz6 = random.randint(625, 1250)
            segment.set_frame_rate(hz6)
            hz7 = random.randint(1250, 2500)
            segment.set_frame_rate(hz7)
            hz8 = random.randint(2500, 5000)
            segment.set_frame_rate(hz8)
            hz9 = random.randint(5000, 10000)
            segment.set_frame_rate(hz9)
            hz10 = random.randint(10000, 20000)
            segment.set_frame_rate(hz10)
            list_factor.append((speed_factor, hz1, hz2, hz3, hz4, hz5, hz6, hz7, hz8, hz9, hz10))            

            edited_segments.append(fast_song)
        for i in range(len(edited_segments)):
            # scale.set(list_factor[i][0])
            speed_label.configure(text="Current Speed: "+str(list_factor[i][0]))
            for j in range(10):
                 exec(f"""scale{j+1}.set(list_factor[{i}][{j+1}])""")
                 exec(f"""label{j+1}.configure(text = shorten_number(list_factor[{i}][{j+1}]))""")

            
            app.update()
            play(edited_segments[i])
    def run_folder(folder_path):
        files = os.listdir(folder_path)
        combined = AudioSegment.empty()

        for file in files:
            file = folder_path+fr"/{file}"
            song = AudioSegment.from_file(file)
            combined += song
        combined.export("combined.mp3", format="mp3")
        time_change = random.randint(int(time1.get()), int(time2.get()))
        max_progress = len(combined)//(time_change*1000)+1
        play_file_mp3("combined.mp3", time_change)

    def run():
        list_data_index = []
        for i in range(7):
            if data[i]:
                list_data_index.append(data[i])
        delay_data = random.randint(int(time_data1.get()), int(time_data2.get()))
        def run_data(i, j):
            data_label.configure(text = f"Data: {j}")
            while running:
                for j in i:
                    run_folder(j)
        random.shuffle(list_data_index)
        for i in range(len(list_data_index)):
            global running
            running = True
            t = threading.Thread(target=run_data, args=(list_data_index[i],i,), daemon=True)
            t.start()
            t.join(delay_data*60)
            running = False
    threading.Thread(target=run, daemon=True).start()

def mode2():

    def play_file_mp3(file, time_change):

        list_factor = []

        song = AudioSegment.from_file(file)

        segments = [song[i:i+time_change*1000] for i in range(0, len(song), time_change*1000)]
        edited_segments = []
        d=0
        for segment in segments:
            d+=1
            progress.set(d/len(segments))
            app.update_idletasks()

            speed_factor = round(random.uniform(float(speed1.get()), float(speed2.get())), 3)
            fast_song = segment.speedup(playback_speed=speed_factor)

            hz1 = random.randint(20, 40)
            segment.set_frame_rate(hz1)
            hz2 = random.randint(40, 80)
            segment.set_frame_rate(hz2)
            hz3 = random.randint(80, 160)
            segment.set_frame_rate(hz3)
            hz4 = random.randint(160, 320)
            segment.set_frame_rate(hz4)
            hz5 = random.randint(320, 625)
            segment.set_frame_rate(hz5)
            hz6 = random.randint(625, 1250)
            segment.set_frame_rate(hz6)
            hz7 = random.randint(1250, 2500)
            segment.set_frame_rate(hz7)
            hz8 = random.randint(2500, 5000)
            segment.set_frame_rate(hz8)
            hz9 = random.randint(5000, 10000)
            segment.set_frame_rate(hz9)
            hz10 = random.randint(10000, 20000)
            segment.set_frame_rate(hz10)
            list_factor.append((speed_factor, hz1, hz2, hz3, hz4, hz5, hz6, hz7, hz8, hz9, hz10))            

            edited_segments.append(fast_song)
        for i in range(len(edited_segments)):
            # scale.set(list_factor[i][0])
            speed_label.configure(text="Current Speed: "+str(list_factor[i][0]))
            for j in range(10):
                 exec(f"""scale{j+1}.set(list_factor[{i}][{j+1}])""")
                 exec(f"""label{j+1}.configure(text = shorten_number(list_factor[{i}][{j+1}]))""")
            
            app.update()
            play(edited_segments[i])
    def run_folder(folder_path):
        folder_label.configure(text = f"Folder: {os.path.basename(folder_path)}")
        files = os.listdir(folder_path)
        combined = AudioSegment.empty()

        random.shuffle(files)

        for file in files:
            file = folder_path+fr"/{file}"
            song = AudioSegment.from_file(file)
            combined += song
        combined.export("combined.mp3", format="mp3")
        time_change = random.randint(int(time1.get()), int(time2.get()))
        max_progress = len(combined)//(time_change*1000)+1
        play_file_mp3("combined.mp3", time_change)

    def run():
        list_data_index = []
        for i in range(7):
            if data[i]:
                list_data_index.append(data[i])
        delay_data = random.randint(int(time_data1.get()), int(time_data2.get()))
        def run_data(i, j):
            data_label.configure(text = f"Data: {j}")
            while running:
                for j in i:
                    run_folder(j)
        random.shuffle(list_data_index)
        for i in range(len(list_data_index)):
            global running
            running = True
            t = threading.Thread(target=run_data, args=(list_data_index[i],i,), daemon=True)
            t.start()
            t.join(delay_data*60)
            running = False
    threading.Thread(target=run, daemon=True).start()


def mode3():

    def play_file_mp3(file, time_change):

        list_factor = []

        song = AudioSegment.from_file(file)

        segments = [song[i:i+time_change*1000] for i in range(0, len(song), time_change*1000)]
        edited_segments = []
        d=0
        for segment in segments:
            d+=1
            progress.set(d/len(segments))
            app.update_idletasks()

            speed_factor = round(random.uniform(float(speed1.get()), float(speed2.get())), 3)
            fast_song = segment.speedup(playback_speed=speed_factor)

            hz1 = random.randint(20, 40)
            segment.set_frame_rate(hz1)
            hz2 = random.randint(40, 80)
            segment.set_frame_rate(hz2)
            hz3 = random.randint(80, 160)
            segment.set_frame_rate(hz3)
            hz4 = random.randint(160, 320)
            segment.set_frame_rate(hz4)
            hz5 = random.randint(320, 625)
            segment.set_frame_rate(hz5)
            hz6 = random.randint(625, 1250)
            segment.set_frame_rate(hz6)
            hz7 = random.randint(1250, 2500)
            segment.set_frame_rate(hz7)
            hz8 = random.randint(2500, 5000)
            segment.set_frame_rate(hz8)
            hz9 = random.randint(5000, 10000)
            segment.set_frame_rate(hz9)
            hz10 = random.randint(10000, 20000)
            segment.set_frame_rate(hz10)
            list_factor.append((speed_factor, hz1, hz2, hz3, hz4, hz5, hz6, hz7, hz8, hz9, hz10))            

            edited_segments.append(fast_song)
        for i in range(len(edited_segments)):
            # scale.set(list_factor[i][0])
            speed_label.configure(text="Current Speed: "+str(list_factor[i][0]))
            for j in range(10):
                 exec(f"""scale{j+1}.set(list_factor[{i}][{j+1}])""")
                 exec(f"""label{j+1}.configure(text = shorten_number(list_factor[{i}][{j+1}]))""")

            
            app.update()
            play(edited_segments[i])
    def run_folder(folder_path):
        data_label.configure(text = f"Data: {folder_path}")
        files = os.listdir(folder_path)
        combined = AudioSegment.empty()

        random.shuffle(files)

        for file in files:
            file = folder_path+fr"/{file}"
            song = AudioSegment.from_file(file)
            combined += song
        combined.export("combined.mp3", format="mp3")
        time_change = random.randint(int(time1.get()), int(time2.get()))
        max_progress = len(combined)//(time_change*1000)+1
        play_file_mp3("combined.mp3", time_change)

    def chia_danh_sach(danh_sach):
    # Tạo một bản sao của danh sách ban đầu để tránh thay đổi danh sách gốc
        danh_sach_sao = danh_sach
        
        # Tìm độ dài lớn nhất trong các danh sách
        do_dai_lon_nhat = max(len(ds) for ds in danh_sach_sao)
        
        # Tạo danh sách mới
        danh_sach_moi = []
        
        for i in range(do_dai_lon_nhat):
            danh_sach_moi.append([])
            for j in range(len(danh_sach)):
                # Kiểm tra xem danh sách j có đủ phần tử để chọn không
                if i < len(danh_sach_sao[j]):
                    # Chọn một phần tử ngẫu nhiên từ danh sách j
                    phan_tu = random.choice(danh_sach_sao[j])
                    
                    # Thêm phần tử vào danh sách mới
                    danh_sach_moi[i].append(phan_tu)
                    
                    # Xóa phần tử đã chọn khỏi danh sách ban đầu để tránh lặp lại
                    danh_sach_sao[j].remove(phan_tu)
                else:
                    # Nếu danh sách j không còn phần tử nào, thêm một giá trị ngẫu nhiên từ các danh sách còn lại
                    danh_sach_con_lai = [ds for ds in danh_sach_sao if ds]
                    phan_tu = random.choice(random.choice(danh_sach_con_lai))
                    danh_sach_moi[i].append(phan_tu)
        
        return danh_sach_moi

    def run():
        list_data_index = []
        for i in range(7):
            if data[i]:
                list_data_index.append(data[i])
        list_data_index = chia_danh_sach(list_data_index)
        delay_data = random.randint(int(time_data1.get()), int(time_data2.get()))
        def run_data(i, j):
            data_label.configure(text = f"Data: {j}")
            while running:
                for j in i:
                    run_folder(j)
        random.shuffle(list_data_index)
        for i in range(len(list_data_index)):
            global running
            running = True
            t = threading.Thread(target=run_data, args=(list_data_index[i],i,), daemon=True)
            t.start()
            t.join(delay_data*60)
            running = False
    threading.Thread(target=run, daemon=True).start()
     
         
             





run_button = customtkinter.CTkButton(log_frame, text=change_language("Start"), command=start, height=170, width= 170)
run_button.grid(row=1, column=2, padx=10, pady=(40, 10))
run_button.configure(state = state)
update_lan.append(run_button)
list_function.append(run_button)

log_box = customtkinter.CTkTextbox(main_frame, height= 150, width= 490, font=("Helvetica", 16, "italic"))
log_box.grid(row=6, column=0, pady = 10, padx = 10)
log_box.insert(1.0, f"{datetime.datetime.now()}:Music Player")
log_box.configure(state = "disabled")


app.mainloop()
